openapi: 3.0.0
info:
  title: 10x Login & Financial Crime
  contact:
    url: https://developer.tenx-platform.com/versions
    email: api@10xbanking.com
  version: 2.6.0
servers:
- url: https://dev.tenx-platform.com
- url: https://test.tenx-platform.com
- url: https://qa.tenx-platform.com
security:
- ApiKeyAuth: []
  BearerAuth: []
tags:
- name: Login
  description: |
    The Login API is used to authenticate users on the 10x platform, and requires a username and passcode to be submitted.
    The 6 digit passcode must be set during a person party onboarding, whilst the username is a partyKey designated once a party has been successfully created.
- name: OAuth2
  description: |
    The access tokens retrieved through authentication have a scope property that defines what the access token can do and what resources it can access.
    The OAuth2 API provides endpoints for retrieving access tokens, updating scope privileges and exchanging refresh tokens for when an access token has expired.
- name: Devices
  description: |
    The Devices API is used to manage devices, allowing a user to change existing device, add new devices, verify devices.
- name: Threatmetrix
  description: |
    This service allows device information to captured and stored.
    This device information is used to ensure the device is unable to call any of our services if it deemed to have any malicious malware installed.
paths:
  /v1/login:
    post:
      tags:
      - Login
      summary: Customer login
      description: |
        **Login with PartyKey and Passcode**

        The **Login API** is used to authenticate users on the 10x platform, and requires a `username` and `passcode` to be submitted.
        The **6 digit** `passcode` must be set during a person party onboarding, whilst the `username` is a `partyKey` designated once a party has been successfully created.
        On a successful **`POST`** `/v1/login` requests, users are presented with an **access token** which must be used on all subsequent API requests that require the `Authorization` header to be specified.
        The `accessToken`  is of **`Bearer`** type and which are passed on the `Authorization` header for all APIs that require the resource owner to authenticate. A sample request is shown here.

        ```
        {
            "username": "ae6e7d2c-7e0b-4e29-9362-bcfe893d0671",
            "passcode": "111222",
            "scope": "subscription:read"
        }

        ```
        **Login with Client side Biometric (Refresh Token)**

        In addition to using username and password, login via client-side biometric is also supported. This occurs via the Login SDK when a customer successfully completes biometric authentication the mobile passes the refresh token that is stored on the Mobile device. When this occurs the authenticationMethod is BIOMETRIC. A sample request is shown here.
        ```
        {
            "refreshToken": "s1RLFmgD2CmNg1rrceGQWIKffc7WGC0P",
            "authenticationMethod": "BIOMETRIC"
        }
        ```
      operationId: login
      parameters:
      - name: X-MockDeviceKey
        in: header
        description: For mocking purposes a random 16 character string used to uniquely
          identify a device
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: login request payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginSuccess'
              examples:
                response:
                  value:
                    accessToken: UQ41fsZAuGGBAApHCGa07gQUZWGn
                    refreshToken: QnTXAvyrjmdpnHkwNGjBXBDnPc8s9Rwy
                    partyKey: 559df7e8-40f4-44e1-af8d-c87cb2c9c85a
                    expiresIn: "3599"
                    refreshTokenExpiresIn: "7689599"
                    scope: party:registration
                    enum: []
                    availableSubscriptions:
                    - partyKey: 559df7e8-40f4-44e1-af8d-c87cb2c9c85a
                      subscriptionKey: 3f5f3259-2558-4009-a701-132de13ecd3a
                      role: PrimaryOwner
  /v1/login/initiateAccountReset:
    post:
      tags:
      - Login
      summary: Initiate Account Reset
      description: |
        Start the process of resetting the account if the account was locked out. The API checks if the party's account is locked out and if so, it returns an access token used to reset the account. for more information follow https://developer.tenx-platform.com/docs/Account_Reset_With_Evidence_docs & https://developer.tenx-platform.com/docs/Account_Reset_docs.
      operationId: initiateAccountReset
      parameters:
      - name: X-MockDeviceKey
        in: header
        description: For mocking purposes a random 16 character string used to uniquely
          identify a device
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: initiate account reset request payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/initiateAccountResetRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/initiateAccountResetSuccess'
              examples:
                response:
                  value:
                    accessToken: UQ41fsZAuGGBAApHCGa07gQUZWGn
                    expiresIn: "3599"
                    applicantId: 326464a3-9fbd-4e7b-8156-a07e980f7fa6
      security:
      - ApiKeyAuth: []
  /v1/login/accountReset:
    post:
      tags:
      - Login
      summary: Account Reset (Passcode reset)
      description: |
        **The API is used to reset the account if the account was locked*
      operationId: accountReset
      parameters:
      - name: X-MockDeviceKey
        in: header
        description: For mocking purposes a random 16 character string used to uniquely
          identify a device
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      - name: X-TransactionId
        in: header
        description: Transaction identifier required to identify whether the user
          is authorised to reset the account. Received on the device via push notification.
        required: false
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: account reset request payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountResetRequest'
        required: true
      responses:
        "200":
          description: OK
  /v1/oauth2/token:
    post:
      tags:
      - OAuth2
      summary: Exchange Access Tokens
      description: |
        In order to provde restricted access to resources in the 10x platform, you will require a token with the correct priveleges.
        Use **`POST`** operation on `/v1/oauth2/token` to update the scope privileges on the account subscription after initial receipt of an access token via login.
        ### There are two options when requesting a token
        1. Request a token with a **single** subscription key.- this will return a token with permissions correct for your role on the subscription. (Admin/Owner roles will have **WRITE** capabilities for that subscription)
        2. Request a token with **multiple** subscription keys. - This will return a token with permissions to **READ** all subscriptions you have requested.
      operationId: exchangeToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_1'
      responses:
        "200":
          description: New Access Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
  /v1/oauth2/stepup:
    post:
      tags:
      - OAuth2
      summary: Step up (strong customer) authentication using a transaction identifier
      description: |
        Requests the user to strong customer (step-up) authenticate using one of the available authentication types plus the Cryptomathic-generated device ID (enforced on the platform). This flow is only enabled for domestic payments so when the user attempts to make a payment, it will need to go through the step-up authentication process. This API handles the authentication request that is initiated by the platform after a customer has posted a payment to /v1/payments/domestic (Domestic Payments API). Once this authentication request is complete, the payment will be replayed separately via the Domestic Payments API.
      operationId: oauth2Stepup
      parameters:
      - name: X-MockDeviceKey
        in: header
        description: For mocking purposes a random 16 character string used to uniquely
          identify a device
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      - name: X-TransactionId
        in: header
        description: Transaction identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: Login request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oauthStepUpLoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oauthStepUpLoginResponse'
  /v1/oauth2/refresh:
    post:
      tags:
      - OAuth2
      summary: Generate accessToken from a refresh token
      operationId: oAuth2Refresh
      requestBody:
        description: refresh request payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oauthRefreshRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oauthRefreshSuccess'
  /v1/devices/verification:
    post:
      tags:
      - Devices
      summary: Initiate Device Verification
      description: |
        Initiate the device verification process by sending an OTP message to the user registered device. A verification identifier is returned in the response. At present only one device key can be linked to a party key but the device can be replaced.

        The API verifies if the provided access token is valid and has the right access scope to change the device. If so, then the API sends a verification code  to the user's new device via SMS in order to verify if the device is associated with the user's mobile number.
      operationId: verification
      parameters:
      - name: X-MockDeviceKey
        in: header
        description: For mocking purposes a random 16 character string used to uniquely
          identify a device
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceVerificationSuccess'
              examples:
                response:
                  value:
                    verificationId: 934fc530-1ef1-4064-bbc2-035cb44e2a36
        "400":
          description: |
            Bad request. Reasons - Unable to retrieve user's telephone details, Too many trials for sending the otp
  /v1/devices/verification/{verificationId}:
    post:
      tags:
      - Devices
      summary: Device Verification
      description: |
        The API verifies if the provided access token is valid and has the right access scope to change the device. If so, then the API verifies the verification code (otp) and  verificationId. If everything is fine the device will be changed successfully.
        Retries - The 10x platform will allow three additional attempts for the person to validate the verification code that they have received.
      operationId: verifyAndChangeDevice
      parameters:
      - name: verificationId
        in: path
        description: |
          Unique identifier to verify device when changing a device
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      - name: X-MockDeviceKey
        in: header
        description: For mocking purposes a random 16 character string used to uniquely
          identify a device
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: verify and change device request payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verifyAndChangeDeviceRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: |
            Bad request. Reasons - Verification Code (otp) has expired or is incorrect, request payload is invalid.
        "404":
          description: |
            Not found. Reasons - Party associated with the device not found or verification Id does not exist.
  /v1/threatmetrix:
    post:
      tags:
      - Threatmetrix
      summary: Threatmetrix app startup
      description: |
        The **POST** operation on `/v1/threatmetrix/` is used for logging a new device session with Threatmetrix , with `sessionId` as the only parameter. The endpoint is to be called everytime to start device profiling.
      operationId: postThreatmetrix
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postThreatmetrixRequest'
      responses:
        "200":
          description: OK
components:
  schemas:
    loginSuccess:
      type: object
      properties:
        accessToken:
          type: string
          description: Valid access token generated for the user.
          example: UQ41fsZAuGGBAApHCGa07gQUZWGn
        refreshToken:
          type: string
          description: Valid refresh token generated for the user.
          example: QnTXAvyrjmdpnHkwNGjBXBDnPc8s9Rwy
        expiresIn:
          type: string
          description: Time (in seconds) after which access token will expire
          example: "3599"
        refreshTokenExpiresIn:
          type: string
          description: Time (in seconds) after which refresh token will expire.
        scope:
          type: string
          description: Specifies what type of access is specifically required per
            resource
          example: 'party: read'
        availableSubscriptions:
          type: array
          description: List of subscriptions this token has access to.
          items:
            $ref: '#/components/schemas/availableSubscriptions'
    availableSubscriptions:
      type: object
      properties:
        partyKey:
          $ref: '#/components/schemas/partyKey'
        subscriptionKey:
          $ref: '#/components/schemas/subscriptionsKey'
        role:
          type: string
          example: PrimaryOwner
          enum:
          - PrimaryOwner
          - Administrator
    passcodeLogin:
      type: object
      properties:
        username:
          type: string
          description: Reference to the colleague's username as specified to 10x.
          format: uuid
        passcode:
          pattern: ^\d{6}$
          type: string
          description: The passcode generated for the colleague by 10x.
          example: In@er9-Kljdfi-49
        scope:
          type: string
          description: Scope for the requested partyKey.
          example: party:registration
    biometricLogin:
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh token obtained from previous login
          example: QnTXAvyrjmdpnHkwNGjBXBDnPc8s9Rwy
        authenticationMethod:
          type: string
          enum:
          - BIOMETRIC
    initiateAccountResetSuccess:
      type: object
      properties:
        accessToken:
          type: string
          description: Valid access token generated for the user with the scope to
            access identity verification check for account reset.
          example: UQ41fsZAuGGBAApHCGa07gQUZWGn
        expiresIn:
          type: string
          description: Time(in seconds)after which access token will expire
          example: "3599"
        applicantId:
          type: string
          description: 'Unique reference for the applicant.(Only for identity verification
            type: IDENTITY)'
          example: 326464a3-9fbd-4e7b-8156-a07e980f7fa6
    initiateAccountResetRequest:
      type: object
      properties:
        username:
          type: string
          description: The username defined by the customer during the registration
            and required for login
          example: benA1
        idvType:
          type: string
          description: The type of the identity verification check
          enum:
          - CHECK_WITH_EVIDENCE
          - IDENTITY
    accountResetRequest:
      type: object
      properties:
        passcode:
          pattern: ^\d{6}$
          type: string
          description: The new pascode defined by the customer required for login
          example: "134523"
    oauthStepUpLoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: Valid access token generated for the user.
          example: UQ41fsZAuGGBAApHCGa07gQUZWGn
        refreshToken:
          type: string
          description: Valid refresh token generated for the user.
          example: QnTXAvyrjmdpnHkwNGjBXBDnPc8s9Rwy
        expiresIn:
          type: string
          description: Time (in seconds) after which access token will expire
          example: "3599"
        refreshTokenExpiresIn:
          type: string
          description: Time (in seconds) after which refresh token will expire.
    oauthStepUpLoginRequest:
      required:
      - passcode
      - username
      properties:
        username:
          type: string
          description: Reference to the PartyKey generated for the customer during
            the registration flow.
          example: 4320c309-d88a-4961-8616-09f5e69e44b6
        passcode:
          pattern: ^\d{6}$
          type: string
          description: The passcode generated by the customer during the registration
            onboarding process.
          example: "135980"
    oauthRefreshSuccess:
      properties:
        accessToken:
          type: string
          description: Valid access token generated for the user
          example: rAp8hfZU2Ob5MxGIeZfIHhJgnQ39
        refreshToken:
          type: string
          description: Valid refresh token generated for the user
          example: A8j7fDREPpGFtE2rFEnBe6oHqVQFQ7Tp
        expiresIn:
          type: string
          description: Time (in seconds) after which access token will expire
          example: "1799"
        refreshTokenExpiresIn:
          type: string
          description: Time (in seconds) after which refresh token will expire
          example: "7689565"
        scopes:
          type: string
          description: Specifies what type of access is specifically required per
            resource
          example: balance:read
        partyKey:
          $ref: '#/components/schemas/partyKey'
    oauthRefreshRequest:
      properties:
        refreshToken:
          type: string
          description: Valid refresh token generated for the user
          example: A8j7fDREPpGFtE2rFEnBe6oHqVQFQ7Tp
    deviceVerificationSuccess:
      type: object
      properties:
        verificationId:
          type: string
          description: Unique identifier to verify device when changing a device
          format: uuid
          example: 934fc530-1ef1-4064-bbc2-035cb44e2a36
    verifyAndChangeDeviceRequest:
      type: object
      properties:
        otp:
          type: string
          description: The verification code sent to the mobile device via SMS.
          example: "123212"
    postThreatmetrixRequest:
      type: object
      properties:
        sessionId:
          type: string
          description: The sessionId is the reference to the device profiling for
            threatmetrix, it is the id for the data scanning.
          example: tmx-1540821584-879234666
    subscriptionsKey:
      type: string
      description: Unique identifier for an account
      format: uuid
    partyKey:
      type: string
      description: partyKey is unique identifier for all party resources associated
        with username.
      format: uuid
    productKey:
      type: string
      description: The unique Product Identifier
      example: 1ba225f7-1b43-4db2-8179-65f49c9ac13b
    body:
      oneOf:
      - $ref: '#/components/schemas/passcodeLogin'
      - $ref: '#/components/schemas/biometricLogin'
    body_1:
      type: object
      properties:
        subscriptionKeys:
          type: array
          items:
            type: string
            description: A unique identifier to an account
            format: uuid
            example: 3b7e91fc-f796-4417-8fb0-14aa36bf654d
        scope:
          type: string
          description: Specifies what type of access is specifically required per
            resource.
          example: balances:read
    inline_response_200:
      type: object
      properties:
        accessToken:
          type: string
          description: Valid access token generated for the user.
          example: UQ41fsZAuGGBAApHCGa07gQUZWGn
        refreshToken:
          type: string
          description: Valid refresh token generated for the user.
          example: QnTXAvyrjmdpnHkwNGjBXBDnPc8s9Rwy
        expiresIn:
          type: string
          description: Time (in seconds) after which access token will expire
          example: "3599"
        refreshTokenExpiresIn:
          type: string
          description: Time (in seconds) after which refresh token will expire.
        partyKey:
          $ref: '#/components/schemas/partyKey'
        scope:
          type: string
          description: Specifies what type of access is specifically required per
            resource
          example: balances:read
        subscriptionsKeys:
          type: array
          items:
            type: string
            description: A unique identifier to an account
            format: uuid
            example: 3b7e91fc-f796-4417-8fb0-14aa36bf654d
    inline_response_200_1:
      type: object
      properties:
        partyKey:
          type: string
          description: Unique identifier for a customer
          format: uuid
          example: f7058f33-1b32-4e6e-b989-bbb2a2ed22f7
